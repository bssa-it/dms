<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * DO NOT EDIT.  Generated by GenCode.php
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';

class CRM_Dmsextension_DAO_Orders extends CRM_Core_DAO
{
  /**
   * static instance to hold the table name
   *
   * @var string
   * @static
   */
  static $_tableName = 'civicrm_dms_orders';
  /**
   * static instance to hold the field values
   *
   * @var array
   * @static
   */
  static $_fields = null;
  /**
   * static instance to hold the keys used in $_fields for each field.
   *
   * @var array
   * @static
   */
  static $_fieldKeys = null;
  /**
   * static instance to hold the FK relationships
   *
   * @var string
   * @static
   */
  static $_links = null;
  /**
   * static instance to hold the values that can
   * be imported
   *
   * @var array
   * @static
   */
  static $_import = null;
  /**
   * static instance to hold the values that can
   * be exported
   *
   * @var array
   * @static
   */
  static $_export = null;
  /**
   * static value to see if we should log any modifications to
   * this table in the civicrm_log table
   *
   * @var boolean
   * @static
   */
  static $_log = true;
  
  /**
   * Unique key
   *
   * @var int unsigned
   */
  public $id;
  /**
   * contact id who is the beneficiary of contributions from this bank account
   *
   * @var int
   */
  public $beneficiary_contact_id;	
/**
   * contact id of the contact who owns the bank account
   *
   * @var int
   */
  public $owner_contact_id;	
/**
   * Order Type:  Debit Order/Stop Order
   *
   * @var varchar
   */
  public $type;	
/**
   * Date this order will execute
   *
   * @var date
   */
  public $order_date;	
/**
   * Contribution amount
   *
   * @var decimal
   */
  public $amount;	
/**
   * Reference
   *
   * @var varchar
   */
  public $reference;	
/**
   * Motivation code
   *
   * @var int
   */
  public $motivation_id;	
/**
   * Approved
   *
   * @var varchar
   */
  public $approved;	
/**
   * Bank account id from civicrm_dms_banks
   *
   * @var int
   */
  public $bank_id;	
/**
   * Type of bank account
   *
   * @var varchar
   */
  public $acccount_type;	
/**
   * Bank account number
   *
   * @var varchar
   */
  public $account_no;	
/**
   * Bank account branch number
   *
   * @var varchar
   */
  public $account_branch_code;	
/**
   * CVV number for credit cards
   *
   * @var varchar
   */
  public $cvv;	
/**
   * Credit Card expiry date
   *
   * @var varchar
   */
  public $expiry_date;	
/**
   * VISA/Mastercard
   *
   * @var varchar
   */
  public $credit_card_type;	
  
  
  
  function __construct()
  {
    $this->__table = 'civicrm_dms_orders';
    parent::__construct();
  }
  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields()
  {
    if (!(self::$_fields)) {
      self::$_fields = array(
       'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('ID') ,
          'required' => true,
        ) ,
        
              'beneficiary_contact_id' => array(
              'name' => 'beneficiary_contact_id',
              'title' => ts('beneficiary contact id'),
              'type' => CRM_Utils_Type::T_INT,
              
            ) ,	

              'owner_contact_id' => array(
              'name' => 'owner_contact_id',
              'title' => ts('owner contact id'),
              'type' => CRM_Utils_Type::T_INT,
              
            ) ,	

              'type' => array(
              'name' => 'type',
              'title' => ts('type'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 50,
            ) ,	

              'order_date' => array(
              'name' => 'order_date',
              'title' => ts('order date'),
              'type' => CRM_Utils_Type::T_DATE,
              
            ) ,	

              'amount' => array(
              'name' => 'amount',
              'title' => ts('amount'),
              'type' => CRM_Utils_Type::T_MONEY,
              
            ) ,	

              'reference' => array(
              'name' => 'reference',
              'title' => ts('reference'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 50,
            ) ,	

              'motivation_id' => array(
              'name' => 'motivation_id',
              'title' => ts('motivation id'),
              'type' => CRM_Utils_Type::T_INT,
              
            ) ,	

              'approved' => array(
              'name' => 'approved',
              'title' => ts('approved'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 10,
            ) ,	

              'bank_id' => array(
              'name' => 'bank_id',
              'title' => ts('bank id'),
              'type' => CRM_Utils_Type::T_INT,
              
            ) ,	

              'acccount_type' => array(
              'name' => 'acccount_type',
              'title' => ts('acccount type'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 50,
            ) ,	

              'account_no' => array(
              'name' => 'account_no',
              'title' => ts('account no'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 50,
            ) ,	

              'account_branch_code' => array(
              'name' => 'account_branch_code',
              'title' => ts('account branch code'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 20,
            ) ,	

              'cvv' => array(
              'name' => 'cvv',
              'title' => ts('cvv'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 10,
            ) ,	

              'expiry_date' => array(
              'name' => 'expiry_date',
              'title' => ts('expiry date'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 10,
            ) ,	

              'credit_card_type' => array(
              'name' => 'credit_card_type',
              'title' => ts('credit card type'),
              'type' => CRM_Utils_Type::T_STRING,
              'maxlength' => 50,
            ) ,	

        
      );
    }
    return self::$_fields;
  }
  /**
   * Returns an array containing, for each field, the arary key used for that
   * field in self::$_fields.
   *
   * @access public
   * @return array
   */
  static function &fieldKeys()
  {
    if (!(self::$_fieldKeys)) {
      self::$_fieldKeys = array(
        'id' => 'id',
        'beneficiary_contact_id' => 'beneficiary_contact_id',	
'owner_contact_id' => 'owner_contact_id',	
'type' => 'type',	
'order_date' => 'order_date',	
'amount' => 'amount',	
'reference' => 'reference',	
'motivation_id' => 'motivation_id',	
'approved' => 'approved',	
'bank_id' => 'bank_id',	
'acccount_type' => 'acccount_type',	
'account_no' => 'account_no',	
'account_branch_code' => 'account_branch_code',	
'cvv' => 'cvv',	
'expiry_date' => 'expiry_date',	
'credit_card_type' => 'credit_card_type',	

      );
    }
    return self::$_fieldKeys;
  }
  /**
   * returns the names of this table
   *
   * @access public
   * @static
   * @return string
   */
  static function getTableName()
  {
    return self::$_tableName;
  }
  /**
   * returns if this table needs to be logged
   *
   * @access public
   * @return boolean
   */
  function getLog()
  {
    return self::$_log;
  }
  /**
   * returns the list of fields that can be imported
   *
   * @access public
   * return array
   * @static
   */
  static function &import($prefix = false)
  {
    if (!(self::$_import)) {
      self::$_import = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('import', $field)) {
          if ($prefix) {
            self::$_import['dms_orders'] = & $fields[$name];
          } else {
            self::$_import[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_import;
  }
  /**
   * returns the list of fields that can be exported
   *
   * @access public
   * return array
   * @static
   */
  static function &export($prefix = false)
  {
    if (!(self::$_export)) {
      self::$_export = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('export', $field)) {
          if ($prefix) {
            self::$_export['dms_orders'] = & $fields[$name];
          } else {
            self::$_export[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_export;
  }
}